/* global describe, it, chai */

// https://mochajs.org/
// https://www.chaijs.com/

import aseq, * as aseqUtil from '../aseq.mjs'
const expect = chai.expect

if (!Symbol.asyncIterator) Symbol.asyncIterator = Symbol('Symbol.asyncIterator')

describe('aseq function', () => {
  it('From integer', async function () {
    const aite = aseq(3)
    expect(aite).to.be.an('object')
    expect(aite[Symbol.asyncIterator]).to.be.a('function')
    expect(await aseqUtil.toArray(aite)).to.deep.equal([0, 1, 2])
  })
  it('From iterator', async function () {
    const aite = aseq([10, 20, 30])
    expect(aite).to.be.an('object')
    expect(aite[Symbol.asyncIterator]).to.be.a('function')
    expect(await aseqUtil.toArray(aite)).to.deep.equal([10, 20, 30])
  })
  it('From async iterator', async function () {
    const aite = aseq(aseqUtil.fromIterator([10, 20, 30]))
    expect(aite).to.be.an('object')
    expect(aite[Symbol.asyncIterator]).to.be.a('function')
    expect(await aseqUtil.toArray(aite)).to.deep.equal([10, 20, 30])
  })
  it('From async function', async function () {
    const aite = aseq(async function (_yield) {
      for (let i = 2; i < 5; i++) {
        _yield(i)
      }
    })
    expect(aite).to.be.an('object')
    expect(aite[Symbol.asyncIterator]).to.be.a('function')
    expect(await aseqUtil.toArray(aite)).to.deep.equal([2, 3, 4])
  })
  it('Errors', async function () {
    expect(() => { aseq(false) }).throw(Error)
  })
})

describe('ArrayAsyncIterator methods', () => {
  const ArrayAsyncIterator = aseqUtil.ArrayAsyncIterator
  it('concat', async function () {
    const aite = aseq(0).concat(0)
    const res11 = await aseqUtil.toArray(aseq([10]).concat([20, 30], 40))
    const res12 = [10].concat([20, 30], 40)
    expect(aite).to.be.an.instanceof(ArrayAsyncIterator)
    expect(res11).to.deep.equal(res12)
  })
  it('entries', async function () {
    const aite = aseq(0).entries()
    const res11 = await aseqUtil.toArray(aseq([10, 20, 30]).entries())
    const res12 = Array.from([10, 20, 30].entries())
    expect(aite).to.be.an.instanceof(ArrayAsyncIterator)
    expect(res11).to.deep.equal(res12)
  })
  it('every', async function () {
    const res11 = await aseq(4).every(v => v >= 0)
    const res12 = [0, 1, 2, 3].every(v => v >= 0)
    const res21 = await aseq(4).every(v => v !== 2)
    const res22 = [0, 1, 2, 3].every(v => v !== 2)
    const res31 = await aseq(4).every(v => null)
    const res32 = [0, 1, 2, 3].every(v => null)
    const res41 = await aseq(4).every(function (v, i) { return v === i && this.p }, { p: true })
    const res42 = [0, 1, 2, 3].every(function (v, i) { return v === i && this.p }, { p: true })
    expect(res11).to.equal(res12)
    expect(res21).to.equal(res22)
    expect(res31).to.equal(res32)
    expect(res41).to.equal(res42)
  })
  it('fill', async function () {
    const aite = aseq(0).fill(0)
    const res11 = await aseqUtil.toArray(aseq(5).fill(9, 1, 3))
    const res12 = [0, 1, 2, 3, 4].fill(9, 1, 3)
    const res21 = await aseqUtil.toArray(aseq(5).fill(9, -4, -1))
    const res22 = [0, 1, 2, 3, 4].fill(9, -4, -1)
    expect(aite).to.be.an.instanceof(ArrayAsyncIterator)
    expect(res11).to.deep.equal(res12)
    expect(res21).to.deep.equal(res22)
  })
  it('filter', async function () {
    const aite = aseq(0).filter(v => true)
    const res11 = await aseqUtil.toArray(aseq(5).filter(v => v % 2 === 0))
    const res12 = [0, 1, 2, 3, 4].filter(v => v % 2 === 0)
    const res21 = await aseqUtil.toArray(aseq(5).filter(function (v, i) { return (v + i) % 6 === this.p }, { p: 2 }))
    const res22 = [0, 1, 2, 3, 4].filter(function (v, i) { return (v + i) % 6 === this.p }, { p: 2 })
    expect(aite).to.be.an.instanceof(ArrayAsyncIterator)
    expect(res11).to.deep.equal(res12)
    expect(res21).to.deep.equal(res22)
  })
  it('find', async function () {
    const res11 = await aseq(4).find(v => v === 2)
    const res12 = [0, 1, 2, 3].find(v => v === 2)
    const res21 = await aseq(4).find(v => v === 9)
    const res22 = [0, 1, 2, 3].find(v => v === 9)
    const res31 = await aseq(4).find(function (v, i) { return v + i === this.p }, { p: 4 })
    const res32 = [0, 1, 2, 3].find(function (v, i) { return v + i === this.p }, { p: 4 })
    expect(res11).to.equal(res12)
    expect(res21).to.equal(res22)
    expect(res31).to.equal(res32)
  })
  it('findIndex', async function () {
    const res11 = await aseq(4).findIndex(v => v === 2)
    const res12 = [0, 1, 2, 3].findIndex(v => v === 2)
    const res21 = await aseq(4).findIndex(v => v === 9)
    const res22 = [0, 1, 2, 3].findIndex(v => v === 9)
    const res31 = await aseq(4).findIndex(function (v, i) { return (v + i) === this.p }, { p: 4 })
    const res32 = [0, 1, 2, 3].findIndex(function (v, i) { return (v + i) === this.p }, { p: 4 })
    expect(res11).to.equal(res12)
    expect(res21).to.equal(res22)
    expect(res31).to.equal(res32)
  })
  it('flat', async function () {
    const aite = aseq(0).flat()
    const res11 = await aseqUtil.toArray(aseq([10, [20, [30]], 40]).flat())
    const res12 = [10, [20, [30]], 40].flat()
    const res21 = await aseqUtil.toArray(aseq([10, [20, [30]], 40]).flat(2))
    const res22 = [10, [20, [30]], 40].flat(2)
    expect(aite).to.be.an.instanceof(ArrayAsyncIterator)
    expect(res11).to.deep.equal(res12)
    expect(res21).to.deep.equal(res22)
  })
  it('flatMap', async function () {
    const aite = aseq(0).flatMap()
    const res11 = await aseqUtil.toArray(aseq(5).flatMap(v => v % 3 === 0 ? [] : [v, v * 3]))
    const res12 = [0, 1, 2, 3, 4].flatMap(v => v % 3 === 0 ? [] : [v, v * 3])
    const res21 = await aseqUtil.toArray(aseq(5).flatMap(function (v, i) { return v % this.p === 1 ? [] : [v, v * i] }, { p: 2 }))
    const res22 = [0, 1, 2, 3, 4].flatMap(function (v, i) { return v % this.p === 1 ? [] : [v, v * i] }, { p: 2 })
    expect(aite).to.be.an.instanceof(ArrayAsyncIterator)
    expect(res11).to.deep.equal(res12)
    expect(res21).to.deep.equal(res22)
  })
  it('forEach', async function () {
    const vals = []
    await aseq(2).forEach(v => vals.push(v))
    expect(vals).to.deep.equal([0, 1])
  })
  it('includes', async function () {
    const res11 = await aseq(4).includes(1)
    const res12 = [0, 1, 2, 3].includes(1)
    const res21 = await aseq(4).includes(1, 1)
    const res22 = [0, 1, 2, 3].includes(1, 1)
    const res31 = await aseq(4).includes(1, 2)
    const res32 = [0, 1, 2, 3].includes(1, 2)
    expect(res11).to.equal(res12)
    expect(res21).to.equal(res22)
    expect(res31).to.equal(res32)
  })
  it('indexOf', async function () {
    const res11 = await aseq([1, 0, 1, 2, 3]).indexOf(1)
    const res12 = [1, 0, 1, 2, 3].indexOf(1)
    const res21 = await aseq([1, 0, 1, 2, 3]).indexOf(1, 2)
    const res22 = [1, 0, 1, 2, 3].indexOf(1, 2)
    const res31 = await aseq([1, 0, 1, 2, 3]).indexOf(1, 3)
    const res32 = [1, 0, 1, 2, 3].indexOf(1, 3)
    const res41 = await aseq([1, 0, 1, 2, 3]).indexOf(1, -1)
    const res42 = [1, 0, 1, 2, 3].indexOf(1, -1)
    expect(res11).to.equal(res12)
    expect(res21).to.equal(res22)
    expect(res31).to.equal(res32)
    expect(res41).to.equal(res42)
  })
  it('join', async function () {
    const res11 = await aseq(2).join()
    const res12 = [0, 1].join()
    const res21 = await aseq(2).join(';')
    const res22 = [0, 1].join(';')
    expect(res11).to.equal(res12)
    expect(res21).to.equal(res22)
  })
  it('keys', async function () {
    const aite = aseq(0).keys()
    const res11 = await aseqUtil.toArray(aseq([10, 20, 30]).keys())
    const res12 = Array.from([10, 20, 30].keys())
    expect(aite).to.be.an.instanceof(ArrayAsyncIterator)
    expect(res11).to.deep.equal(res12)
  })
  it('lastIndexOf', async function () {
    const res11 = await aseq([1, 0, 1, 2, 3]).lastIndexOf(1)
    const res12 = [1, 0, 1, 2, 3].lastIndexOf(1)
    const res21 = await aseq([1, 0, 1, 2, 3]).lastIndexOf(1, 1)
    const res22 = [1, 0, 1, 2, 3].lastIndexOf(1, 1)
    const res31 = await aseq([1, 0, 1, 2, 3]).lastIndexOf(1, 2)
    const res32 = [1, 0, 1, 2, 3].lastIndexOf(1, 2)
    const res41 = await aseq([1, 0, 1, 2, 3]).lastIndexOf(1, -1)
    const res42 = [1, 0, 1, 2, 3].lastIndexOf(1, -1)
    expect(res11).to.equal(res12)
    expect(res21).to.equal(res22)
    expect(res31).to.equal(res32)
    expect(res41).to.equal(res42)
  })
  it('map', async function () {
    const aite = aseq(0).map(v => true)
    const res11 = await aseqUtil.toArray(aseq(5).map(v => v * 2 + 1))
    const res12 = [0, 1, 2, 3, 4].map(v => v * 2 + 1)
    const res21 = await aseqUtil.toArray(aseq(5).map(function (v, i) { return (v + i) + this.p }, { p: 3 }))
    const res22 = [0, 1, 2, 3, 4].map(function (v, i) { return (v + i) + this.p }, { p: 3 })
    expect(aite).to.be.an.instanceof(ArrayAsyncIterator)
    expect(res11).to.deep.equal(res12)
    expect(res21).to.deep.equal(res22)
  })
  it('reduce', async function () {
    const res11 = await aseq(5).reduce((l, r) => l + r)
    const res12 = [0, 1, 2, 3, 4].reduce((l, r) => l + r)
    const res21 = await aseq(5).reduce((l, r) => l + r, 100)
    const res22 = [0, 1, 2, 3, 4].reduce((l, r) => l + r, 100)
    const res31 = await aseq([[0, 1], [2, 3]]).reduce((l, r) => l.concat(r))
    const res32 = [[0, 1], [2, 3]].reduce((l, r) => l.concat(r))
    expect(res11).to.equal(res12)
    expect(res21).to.equal(res22)
    expect(res31).to.deep.equal(res32)
  })
  it('reduceRight', async function () {
    const res11 = await aseq(5).reduceRight((l, r) => l + r)
    const res12 = [0, 1, 2, 3, 4].reduceRight((l, r) => l + r)
    const res21 = await aseq(5).reduceRight((l, r) => l + r, 100)
    const res22 = [0, 1, 2, 3, 4].reduceRight((l, r) => l + r, 100)
    const res31 = await aseq([[0, 1], [2, 3]]).reduceRight((l, r) => l.concat(r))
    const res32 = [[0, 1], [2, 3]].reduceRight((l, r) => l.concat(r))
    expect(res11).to.equal(res12)
    expect(res21).to.equal(res22)
    expect(res31).to.deep.equal(res32)
  })
  it('slice', async function () {
    const aite = aseq(0).slice()
    const res11 = await aseqUtil.toArray(aseq(5).slice(1, 3))
    const res12 = [0, 1, 2, 3, 4].slice(1, 3)
    const res21 = await aseqUtil.toArray(aseq(5).slice(1))
    const res22 = [0, 1, 2, 3, 4].slice(1)
    const res31 = await aseqUtil.toArray(aseq(5).slice())
    const res32 = [0, 1, 2, 3, 4].slice()
    const res41 = await aseqUtil.toArray(aseq(5).slice(-1))
    const res42 = [0, 1, 2, 3, 4].slice(-1)
    expect(aite).to.be.an.instanceof(ArrayAsyncIterator)
    expect(res11).to.deep.equal(res12)
    expect(res21).to.deep.equal(res22)
    expect(res31).to.deep.equal(res32)
    expect(res41).to.deep.equal(res42)
  })
  it('some', async function () {
    const res11 = await aseq(4).some(v => v >= 0)
    const res12 = [0, 1, 2, 3].some(v => v >= 0)
    const res21 = await aseq(4).some(v => v !== 2)
    const res22 = [0, 1, 2, 3].some(v => v !== 2)
    const res31 = await aseq(4).some(v => null)
    const res32 = [0, 1, 2, 3].some(v => null)
    const res41 = await aseq(4).some(function (v, i) { return v === i && this.p }, { p: true })
    const res42 = [0, 1, 2, 3].some(function (v, i) { return v === i && this.p }, { p: true })
    expect(res11).to.equal(res12)
    expect(res21).to.equal(res22)
    expect(res31).to.equal(res32)
    expect(res41).to.equal(res42)
  })
  it('values', async function () {
    const aite = aseq(0).values()
    const res11 = await aseqUtil.toArray(aseq([10, 20, 30]).values())
    const res12 = Array.from([10, 20, 30].values())
    expect(aite).to.be.an.instanceof(ArrayAsyncIterator)
    expect(res11).to.deep.equal(res12)
  })
  it('toArray', async function () {
    const res11 = await aseq([3, 4, 5]).toArray()
    const res12 = [3, 4, 5]
    expect(res11).to.deep.equal(res12)
  })
})
describe('Processing orders', () => {
  it('Basic', async function () {
    const orders = []
    await aseq(2).map(v => {
      orders.push('#1', v)
      return v
    }).map(v => {
      orders.push('#2', v)
      return v
    }).join()
    expect(orders).to.deep.equal(['#1', 0, '#2', 0, '#1', 1, '#2', 1])
  })
})
